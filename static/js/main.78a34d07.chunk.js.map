{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PersonPage","personId","match","params","useState","isLoading","setIsLoading","data","setData","useEffect","fetch","then","res","json","response","console","log","catch","error","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","to","HomePage","results","map","person","index","key","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAIMA,G,MAAa,SAAC,GAAe,IAErBC,EAFoB,EAAZC,MAElBC,OAAUF,SAFoB,EAIEG,oBAAS,GAJX,mBAIzBC,EAJyB,KAIdC,EAJc,OAKRF,qBALQ,mBAKzBG,EALyB,KAKnBC,EALmB,KAkBhC,OAXAC,qBAAU,WACRC,MAAM,gCAAD,OAAiCT,GAAY,IAC/CU,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLN,EAAQM,GACRR,GAAa,GACbS,QAAQC,IAAR,uCAA4Cf,OAE7CgB,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,QAC/B,CAACjB,IAGF,qCACII,GACA,oCACE,qCAAWE,EAAKY,MAChB,uCAAaZ,EAAKa,QAClB,qCAAWb,EAAKc,MAChB,2CAAiBd,EAAKe,YACtB,2CAAiBf,EAAKgB,YACtB,0CAAgBhB,EAAKiB,WACrB,2CAAiBjB,EAAKkB,YACtB,uCAAalB,EAAKmB,QAClB,kBAAC,IAAD,CAAMC,GAAG,KAAT,wBAOJC,EAAW,WAAO,IAAD,EACaxB,oBAAS,GADtB,mBACdC,EADc,KACHC,EADG,OAEGF,qBAFH,mBAEdG,EAFc,KAERC,EAFQ,KAcrB,OAVAC,qBAAU,WACRC,MAAM,gCAAiC,IACpCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLN,EAAQM,EAASe,SACjBvB,GAAa,MAEdW,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,QAC/B,IAGD,qCACIb,GACAE,EAAKuB,KAAI,SAACC,EAAQC,GAChB,OACE,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAML,GAAE,kBAAaK,EAAQ,IAAMD,EAAOZ,KAA1C,iBAmBCe,EAXH,WACV,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,oBAAoBC,UAAWrC,OC9D/BsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2DCZNwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMkC,c","file":"static/js/main.78a34d07.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nconst PersonPage = ({ match }) => {\n  const {\n    params: { personId },\n  } = match;\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/people/${personId}`, {})\n      .then((res) => res.json())\n      .then((response) => {\n        setData(response);\n        setIsLoading(false);\n        console.log(`https://swapi.dev/api/people/${personId}`);\n      })\n      .catch((error) => console.log(error));\n  }, [personId]);\n\n  return (\n    <>\n      {!isLoading && (\n        <>\n          <h1>Name: {data.name}</h1>\n          <h2>Height: {data.height}</h2>\n          <h2>Mass: {data.mass}</h2>\n          <h2>Hair Color: {data.hair_color}</h2>\n          <h2>Skin Color: {data.skin_color}</h2>\n          <h2>Eye Color: {data.eye_color}</h2>\n          <h2>Birth Year: {data.birth_year}</h2>\n          <h2>Gender: {data.gender}</h2>\n          <Link to=\"/\">Back to homepage</Link>\n        </>\n      )}\n    </>\n  );\n};\n\nconst HomePage = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    fetch(\"https://swapi.dev/api/people/\", {})\n      .then((res) => res.json())\n      .then((response) => {\n        setData(response.results);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <>\n      {!isLoading &&\n        data.map((person, index) => {\n          return (\n            <h5 key={index}>\n              <Link to={`/person/${index + 1}`}>{person.name}'s Page</Link>\n            </h5>\n          );\n        })}\n    </>\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/person/:personId\" component={PersonPage} />\n      </Router>\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}